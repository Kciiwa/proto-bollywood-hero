// /* eslint-disable no-unused-vars */
// /* eslint-disable no-undef */
// const functions = require("firebase-functions");
// const admin = require("firebase-admin");

// admin.initializeApp();
// const db = admin.database();

// exports.generateSong = functions.https.onCall(async (data, context) => {
//   const {
//     recipient,
//     familyMember,
//     name,
//     zodiacSign,
//     gender,
//     height,
//     weight,
//     cityOfBirth,
//     description,
//     dateTimeOfBirth,
//   } = data.data;

//   // –í–∞–ª–∏–¥–∞—Ü–∏—è
//   if (
//     !recipient ||
//     !name ||
//     !zodiacSign ||
//     !gender ||
//     !height ||
//     !weight ||
//     !cityOfBirth ||
//     !description ||
//     !dateTimeOfBirth
//   ) {
//     throw new functions.https.HttpsError(
//       "invalid-argument",
//       "Missing fields in input data."
//     );
//   }

//   // 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
//   const prompt = `
// –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏, –ø–æ—Å–≤—è—â—ë–Ω–Ω–æ–π ${recipient} (${familyMember}), –ø–æ –∏–º–µ–Ω–∏ ${name}.
// –û–Ω–∞ —Ä–æ–¥–∏–ª–∞—Å—å –≤ –≥–æ—Ä–æ–¥–µ ${cityOfBirth}, ${dateTimeOfBirth}. –ü–æ –∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞ –æ–Ω–∞ ‚Äî ${zodiacSign}.
// –≠—Ç–æ ${gender}, —Ä–æ—Å—Ç–æ–º ${height} —Å–º –∏ –≤–µ—Å–æ–º ${weight} –∫–≥.

// –í–æ—Ç –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞: "${description}".

// –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —Ç—ë–ø–ª—ã–º, –∏—Å–∫—Ä–µ–Ω–Ω–∏–º, —Å –Ω–æ—Ç–∫–∞–º–∏ –≤–æ—Å—Ö–∏—â–µ–Ω–∏—è –∏ –ª—é–±–≤–∏.
// –î–æ–±–∞–≤—å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã, –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Å–æ –∑–Ω–∞–∫–æ–º –∑–æ–¥–∏–∞–∫–∞, –≤–Ω–µ—à–Ω–æ—Å—Ç—å—é –∏ —á–µ—Ä—Ç–∞–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.
// –ù–µ –ø–∏—à–∏ —Å–ª–∏—à–∫–æ–º –ø–∞—Ñ–æ—Å–Ω–æ ‚Äî –≤–∞–∂–Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –¥—É—à–µ–≤–Ω–æ—Å—Ç—å.

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Å–Ω–∏: 2 –∫—É–ø–ª–µ—Ç–∞, 2 –ø—Ä–∏–ø–µ–≤–∞, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ ‚Äî –±—Ä–∏–¥–∂.
// –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ –º—É–∑—ã–∫—É.
// `;

//   // 2. –≠–º—É–ª—è—Ü–∏—è ChatGPT (—Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Ç—É—Ç)
//   const mockedLyrics = `–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –¥–ª—è ${name}`;

//   // 3. –≠–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Suno –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ
//   const mockedAudioUrl = "https://mocked-suno.com/audio/generated-song.mp3";

//   // 4. –í–æ–∑–≤—Ä–∞—Ç –¥–∞–Ω–Ω—ã—Ö
//   const result = {
//     songTitle: `–ü–µ—Å–Ω—è –¥–ª—è ${name}`,
//     lyrics: mockedLyrics,
//     audioUrl: mockedAudioUrl,
//   };

//   // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
//   console.log("üé§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏:\n", mockedLyrics);
//   console.log("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Å–Ω—é:", mockedAudioUrl);

//   return result;
// });

/* eslint-disable no-unused-vars */
/* eslint-disable no-undef */
const functions = require("firebase-functions");
const admin = require("firebase-admin");

admin.initializeApp();
const db = admin.database();

exports.generateSong = functions.https.onCall(async (data, context) => {
  const {
    recipient,
    familyMember,
    name,
    zodiacSign,
    gender,
    height,
    weight,
    cityOfBirth,
    description,
    dateTimeOfBirth,
  } = data.data;

  //   console.log("üë§ UID:", context.auth.uid);
  // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  //   if (!context.auth) {
  //     throw new functions.https.HttpsError(
  //       "unauthenticated",
  //       "User must be authenticated to generate songs."
  //     );
  //   }

  const uid = context.auth;
  console.log("üë§ UID:", uid);

  // üß™ –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (
    !recipient ||
    !name ||
    !zodiacSign ||
    !gender ||
    !height ||
    !weight ||
    !cityOfBirth ||
    !description ||
    !dateTimeOfBirth
  ) {
    throw new functions.https.HttpsError(
      "invalid-argument",
      "Missing fields in input data."
    );
  }

  // ‚úèÔ∏è –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
  const prompt = `
–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏, –ø–æ—Å–≤—è—â—ë–Ω–Ω–æ–π ${recipient} (${familyMember}), –ø–æ –∏–º–µ–Ω–∏ ${name}.
–û–Ω–∞ —Ä–æ–¥–∏–ª–∞—Å—å –≤ –≥–æ—Ä–æ–¥–µ ${cityOfBirth}, ${dateTimeOfBirth}. –ü–æ –∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞ –æ–Ω–∞ ‚Äî ${zodiacSign}.
–≠—Ç–æ ${gender}, —Ä–æ—Å—Ç–æ–º ${height} —Å–º –∏ –≤–µ—Å–æ–º ${weight} –∫–≥.

–í–æ—Ç –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞: "${description}".

–°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —Ç—ë–ø–ª—ã–º, –∏—Å–∫—Ä–µ–Ω–Ω–∏–º, —Å –Ω–æ—Ç–∫–∞–º–∏ –≤–æ—Å—Ö–∏—â–µ–Ω–∏—è –∏ –ª—é–±–≤–∏.
–î–æ–±–∞–≤—å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã, –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Å–æ –∑–Ω–∞–∫–æ–º –∑–æ–¥–∏–∞–∫–∞, –≤–Ω–µ—à–Ω–æ—Å—Ç—å—é –∏ —á–µ—Ä—Ç–∞–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.
–ù–µ –ø–∏—à–∏ —Å–ª–∏—à–∫–æ–º –ø–∞—Ñ–æ—Å–Ω–æ ‚Äî –≤–∞–∂–Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –¥—É—à–µ–≤–Ω–æ—Å—Ç—å.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Å–Ω–∏: 2 –∫—É–ø–ª–µ—Ç–∞, 2 –ø—Ä–∏–ø–µ–≤–∞, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ ‚Äî –±—Ä–∏–¥–∂.
–§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ –º—É–∑—ã–∫—É.
`;

  // üé≠ –≠–º—É–ª—è—Ü–∏—è ChatGPT-–æ—Ç–≤–µ—Ç–∞
  const mockedLyrics = `–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –¥–ª—è ${name}`;

  // üéß –≠–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Suno
  const mockedAudioUrl = "https://mocked-suno.com/audio/generated-song.mp3";

  // üéº –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
  const songTitle = `–ü–µ—Å–Ω—è –¥–ª—è ${name}`;

  // üóÉ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
  const songRef = db.ref(`users/${uid}/songs`).push();
  const createdAt = Date.now();

  await songRef.set({
    songId: songRef.key,
    songTitle,
    lyrics: mockedLyrics,
    audioUrl: mockedAudioUrl,
    createdAt,
    recipient,
    familyMember,
    name,
    zodiacSign,
    gender,
    height,
    weight,
    cityOfBirth,
    description,
    dateTimeOfBirth,
  });

  // üîÅ –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  return {
    songId: songRef.key,
    songTitle,
    lyrics: mockedLyrics,
    audioUrl: mockedAudioUrl,
    createdAt,
  };
});
